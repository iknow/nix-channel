commit 0cf9bb3a73d435e6429071ff0e0dfaae80c3af9d
Author: Thomas Dy <thatsmydoing@gmail.com>
Date:   Tue Dec 1 18:28:20 2020 +0900

    Don't fetch default branch if ref is specified

diff --git a/api/internal/git/cloner.go b/api/internal/git/cloner.go
index 6df8dca2..7323f20b 100644
--- a/api/internal/git/cloner.go
+++ b/api/internal/git/cloner.go
@@ -29,43 +29,57 @@ func ClonerUsingGitExec(repoSpec *RepoSpec) error {
 
 	cmd := exec.Command(
 		gitProgram,
-		"clone",
-		"--depth=1",
-		repoSpec.CloneSpec(),
+		"init",
 		repoSpec.Dir.String())
 	out, err := cmd.CombinedOutput()
 	if err != nil {
-		log.Printf("Error cloning git repo: %s", out)
+		log.Printf("Error initializing git repo: %s", out)
 		return errors.Wrapf(
 			err,
-			"trouble cloning git repo %v in %s",
-			repoSpec.CloneSpec(), repoSpec.Dir.String())
+			"trouble initializing git repo in %s",
+			repoSpec.Dir.String())
 	}
 
+	cmd = exec.Command(
+		gitProgram,
+		"remote",
+		"add",
+		"origin",
+		repoSpec.CloneSpec())
+	cmd.Dir = repoSpec.Dir.String()
+	out, err = cmd.CombinedOutput()
+	if err != nil {
+		log.Printf("Error adding remote: %s", out)
+		return errors.Wrapf(err, "trouble adding remote %s", repoSpec.CloneSpec())
+	}
+
+	ref := "HEAD"
 	if repoSpec.Ref != "" {
-		cmd = exec.Command(
-			gitProgram,
-			"fetch",
-			"--depth=1",
-			"origin",
-			repoSpec.Ref)
-		cmd.Dir = repoSpec.Dir.String()
-		out, err = cmd.CombinedOutput()
-		if err != nil {
-			log.Printf("Error fetching ref: %s", out)
-			return errors.Wrapf(err, "trouble fetching %s", repoSpec.Ref)
-		}
+		ref = repoSpec.Ref
+	}
 
-		cmd = exec.Command(
-			gitProgram,
-			"checkout",
-			"FETCH_HEAD")
-		cmd.Dir = repoSpec.Dir.String()
-		out, err = cmd.CombinedOutput()
-		if err != nil {
-			log.Printf("Error checking out ref: %s", out)
-			return errors.Wrapf(err, "trouble checking out %s", repoSpec.Ref)
-		}
+	cmd = exec.Command(
+		gitProgram,
+		"fetch",
+		"--depth=1",
+		"origin",
+		ref)
+	cmd.Dir = repoSpec.Dir.String()
+	out, err = cmd.CombinedOutput()
+	if err != nil {
+		log.Printf("Error fetching ref: %s", out)
+		return errors.Wrapf(err, "trouble fetching %s", ref)
+	}
+
+	cmd = exec.Command(
+		gitProgram,
+		"checkout",
+		"FETCH_HEAD")
+	cmd.Dir = repoSpec.Dir.String()
+	out, err = cmd.CombinedOutput()
+	if err != nil {
+		log.Printf("Error checking out ref: %s", out)
+		return errors.Wrapf(err, "trouble checking out %s", ref)
 	}
 
 	cmd = exec.Command(
